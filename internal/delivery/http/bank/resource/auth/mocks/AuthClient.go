// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/tizzhh/micro-banking/internal/delivery/http/bank/resource/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthClient is an autogenerated mock type for the AuthClient type
type AuthClient struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *AuthClient) Login(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, email, password, firstName, lastName, age
func (_m *AuthClient) Register(ctx context.Context, email string, password string, firstName string, lastName string, age uint32) (uint64, error) {
	ret := _m.Called(ctx, email, password, firstName, lastName, age)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, uint32) (uint64, error)); ok {
		return rf(ctx, email, password, firstName, lastName, age)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, uint32) uint64); ok {
		r0 = rf(ctx, email, password, firstName, lastName, age)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, uint32) error); ok {
		r1 = rf(ctx, email, password, firstName, lastName, age)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unregister provides a mock function with given fields: ctx, email, password
func (_m *AuthClient) Unregister(ctx context.Context, email string, password string) error {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Unregister")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, email, oldPassword, newPassword
func (_m *AuthClient) UpdatePassword(ctx context.Context, email string, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, email, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, email, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User provides a mock function with given fields: ctx, email
func (_m *AuthClient) User(ctx context.Context, email string) (auth.UserResponse, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 auth.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (auth.UserResponse, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) auth.UserResponse); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(auth.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthClient creates a new instance of AuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthClient {
	mock := &AuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
