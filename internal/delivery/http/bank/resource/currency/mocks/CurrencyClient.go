// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	currency "github.com/tizzhh/micro-banking/internal/delivery/http/bank/resource/currency"
)

// CurrencyClient is an autogenerated mock type for the CurrencyClient type
type CurrencyClient struct {
	mock.Mock
}

// Buy provides a mock function with given fields: ctx, email, currencyCode, amount
func (_m *CurrencyClient) Buy(ctx context.Context, email string, currencyCode string, amount uint64) (float32, error) {
	ret := _m.Called(ctx, email, currencyCode, amount)

	if len(ret) == 0 {
		panic("no return value specified for Buy")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64) (float32, error)); ok {
		return rf(ctx, email, currencyCode, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64) float32); ok {
		r0 = rf(ctx, email, currencyCode, amount)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uint64) error); ok {
		r1 = rf(ctx, email, currencyCode, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sell provides a mock function with given fields: ctx, email, currencyCode, amount
func (_m *CurrencyClient) Sell(ctx context.Context, email string, currencyCode string, amount uint64) (float32, error) {
	ret := _m.Called(ctx, email, currencyCode, amount)

	if len(ret) == 0 {
		panic("no return value specified for Sell")
	}

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64) (float32, error)); ok {
		return rf(ctx, email, currencyCode, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64) float32); ok {
		r0 = rf(ctx, email, currencyCode, amount)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uint64) error); ok {
		r1 = rf(ctx, email, currencyCode, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wallets provides a mock function with given fields: ctx, email
func (_m *CurrencyClient) Wallets(ctx context.Context, email string) (currency.WalletResponse, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Wallets")
	}

	var r0 currency.WalletResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (currency.WalletResponse, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) currency.WalletResponse); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(currency.WalletResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCurrencyClient creates a new instance of CurrencyClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCurrencyClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CurrencyClient {
	mock := &CurrencyClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
